__VERSION__ = "1.3"
DESC = """Load a map file generated by IDA"""

import immlib
import re
import pefile
import getopt

def usage(imm):
    imm.log("!loadmap -f <map_file> [-m <module_name>]")
    imm.log(" ex: !loadmap -f c:\myprog.map")
    imm.log(" ex: !loadmap -f c:\user32.map -m USER32.DLL")
    
def main(args):
    imm = immlib.Debugger()
    
    if not args:
        return usage(imm)
    try:
        opts, argo = getopt.getopt(args, "m:f:")
    except getopt.GetoptError:
        usage(imm)
        return "Incorrect number of arguments (No args)"
    
    modulename = imm.getDebuggedName()
    s = None
    filename = None
    
    for o, a in opts:
        if o == "-m":
            modulename = a
        elif o == "-f":
            filename = a
    
    if filename is None:
        usage(imm)
        return "No map file has been specified"

    # Read map file and extract valid names
    s = open(filename).read()
    re_labels = re.compile('\s+([\dA-F]{4}):([\dA-F]{8})\s+([^0-9][\S]+)')
    labels_list = [[int(t1, 16) - 1, int(t2, 16), t3] for (t1, t2, t3) in re_labels.findall(s)]
    
    # Parse executable using pefile
    mod = imm.getModule(modulename)
    pe = pefile.PE(mod.getPath(), fast_load=True)
    
    # Set labels and comments in disassembly
    for l in labels_list:
        address = mod.getBaseAddress() + pe.sections[l[0]].VirtualAddress + l[1]
        imm.setLabel(address, l[2])
    return "Map file loaded"